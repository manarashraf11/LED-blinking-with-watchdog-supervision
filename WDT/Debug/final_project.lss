
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000094a  000009de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800102  00800102  000009e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf5  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000973  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f58  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00003120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007a04  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f4  00000000  00000000  0000ae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000306d  00000000  00000000  0000b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  9e:	0c 94 a3 04 	jmp	0x946	; 0x946 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_testPins>:
#include "toggle.h"
#include "Bit_Operations.h"
#include "Std_Types.h"


void toggle_testPins(volatile uint8 *ddr, volatile uint8 *port, int pin) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <toggle_testPins+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <toggle_testPins+0x8>
  ae:	00 d0       	rcall	.+0      	; 0xb0 <toggle_testPins+0xa>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	7c 83       	std	Y+4, r23	; 0x04
  ba:	6b 83       	std	Y+3, r22	; 0x03
  bc:	5e 83       	std	Y+6, r21	; 0x06
  be:	4d 83       	std	Y+5, r20	; 0x05
    *ddr |= (1 << pin); // set as output
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	28 2f       	mov	r18, r24
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0d 80       	ldd	r0, Y+5	; 0x05
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <toggle_testPins+0x30>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <toggle_testPins+0x2c>
  da:	82 2b       	or	r24, r18
  dc:	28 2f       	mov	r18, r24
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	9a 81       	ldd	r25, Y+2	; 0x02
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
    *port ^= (1 << pin); // toggle the pin
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	9c 81       	ldd	r25, Y+4	; 0x04
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	28 2f       	mov	r18, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0d 80       	ldd	r0, Y+5	; 0x05
  f6:	02 c0       	rjmp	.+4      	; 0xfc <toggle_testPins+0x56>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <toggle_testPins+0x52>
 100:	82 27       	eor	r24, r18
 102:	28 2f       	mov	r18, r24
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	9c 81       	ldd	r25, Y+4	; 0x04
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
}
 10c:	00 00       	nop
 10e:	26 96       	adiw	r28, 0x06	; 6
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <Timer1_Init>:
#include "toggle.h"
#include "Std_Types.h"



void Timer1_Init() {
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	//disable power saving mode
	PRR &= ~(1<<PRTIM1);
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	20 81       	ld	r18, Z
 130:	84 e6       	ldi	r24, 0x64	; 100
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	27 7f       	andi	r18, 0xF7	; 247
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
    // Set CTC mode (Timer Counter Control Reg)
    TCCR1B |= (1 << WGM12);
 13a:	81 e8       	ldi	r24, 0x81	; 129
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	20 81       	ld	r18, Z
 142:	81 e8       	ldi	r24, 0x81	; 129
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	28 60       	ori	r18, 0x08	; 8
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18

    // prescaler = 64 , start the timer
    TCCR1B |= (1 << CS11) | (1 << CS10);
 14c:	81 e8       	ldi	r24, 0x81	; 129
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	20 81       	ld	r18, Z
 154:	81 e8       	ldi	r24, 0x81	; 129
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	23 60       	ori	r18, 0x03	; 3
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18

    //Output Compare Register
    OCR1A = 815; // 6249 for 8 MHz , 12499 for 16MHz Clock ,815 for 1MHz
 15e:	88 e8       	ldi	r24, 0x88	; 136
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2f e2       	ldi	r18, 0x2F	; 47
 164:	33 e0       	ldi	r19, 0x03	; 3
 166:	fc 01       	movw	r30, r24
 168:	31 83       	std	Z+1, r19	; 0x01
 16a:	20 83       	st	Z, r18

    // Enable timer compare interrupt
    // TIMSK1 Giving semantic error, so if not defined replace by its address
    #ifdef TIMSK1
    TIMSK1 |= (1 << OCIE1A);
 16c:	8f e6       	ldi	r24, 0x6F	; 111
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	20 81       	ld	r18, Z
 174:	8f e6       	ldi	r24, 0x6F	; 111
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	22 60       	ori	r18, 0x02	; 2
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
    #else
    *((volatile uint8 *)0x6F) |= (1 << 1);
    #endif
}
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <__vector_11>:


ISR(TIMER1_COMPA_vect) {
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62

	 // This ISR will be called every 50ms
	// toggle B0 for debugging

    if ((WDGM_ProvideSupervisionStatus() && !WDGM_MainFunctionStuck())) {
 1b0:	0e 94 56 02 	call	0x4ac	; 0x4ac <WDGM_ProvideSupervisionStatus>
 1b4:	89 2b       	or	r24, r25
 1b6:	79 f0       	breq	.+30     	; 0x1d6 <__vector_11+0x50>
 1b8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <WDGM_MainFunctionStuck>
 1bc:	89 2b       	or	r24, r25
 1be:	59 f4       	brne	.+22     	; 0x1d6 <__vector_11+0x50>
		toggle_testPins(&DDRB, &PORTB,PIN0_ID); //ISR PIN
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	65 e2       	ldi	r22, 0x25	; 37
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	84 e2       	ldi	r24, 0x24	; 36
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_testPins>
        WDGDrv_Refresh();
 1d0:	0e 94 ae 02 	call	0x55c	; 0x55c <WDGDrv_Refresh>
 1d4:	16 c0       	rjmp	.+44     	; 0x202 <__vector_11+0x7c>
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	88 70       	andi	r24, 0x08	; 8
 1dc:	99 27       	eor	r25, r25
 1de:	89 2b       	or	r24, r25
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <__vector_11+0x60>
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_11+0x62>
 1e6:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	97 70       	andi	r25, 0x07	; 7
 1ec:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 1ee:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	a8 95       	wdr
 1f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    } 
     else {
     	wdt_enable(WDTO_15MS);
     }
}
 202:	00 00       	nop
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_7>:
//	*((volatile uint8 *)0x70) |= (1 << 1);
//	#endif
//}

// ISR for Timer2 compare match
ISR(TIMER2_COMPA_vect) {
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
    PORTB ^= (1 << PIN2_ID); // Toggle PB2 for 500ms interval
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	30 81       	ld	r19, Z
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	24 e0       	ldi	r18, 0x04	; 4
 256:	23 27       	eor	r18, r19
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
}
 25c:	00 00       	nop
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:
#include "GPIO.h"

uint32 counter_main=0;


int main(void) {
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	2e 97       	sbiw	r28, 0x0e	; 14
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << PIN7_ID);
 28c:	84 e2       	ldi	r24, 0x24	; 36
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	20 81       	ld	r18, Z
 294:	84 e2       	ldi	r24, 0x24	; 36
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	20 68       	ori	r18, 0x80	; 128
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
	GPIO_Write(7,1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	87 e0       	ldi	r24, 0x07	; 7
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GPIO_Write>

    LEDM_Init();
 2aa:	0e 94 0d 03 	call	0x61a	; 0x61a <LEDM_Init>
    WDGDrv_Init();
 2ae:	0e 94 82 02 	call	0x504	; 0x504 <WDGDrv_Init>
    WDGM_Init();
 2b2:	0e 94 0b 02 	call	0x416	; 0x416 <WDGM_Init>
    Timer1_Init();
 2b6:	0e 94 90 00 	call	0x120	; 0x120 <Timer1_Init>
//    Timer2_Init();

    ENABLE_INTERRUPTS(); // Enable global interrupts
 2ba:	8f e5       	ldi	r24, 0x5F	; 95
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	91 81       	ldd	r25, Z+1	; 0x01
 2c4:	a2 81       	ldd	r26, Z+2	; 0x02
 2c6:	b3 81       	ldd	r27, Z+3	; 0x03
 2c8:	2f e5       	ldi	r18, 0x5F	; 95
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	f9 01       	movw	r30, r18
 2d0:	80 83       	st	Z, r24
 2d2:	91 83       	std	Z+1, r25	; 0x01
 2d4:	a2 83       	std	Z+2, r26	; 0x02
 2d6:	b3 83       	std	Z+3, r27	; 0x03
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	a0 e2       	ldi	r26, 0x20	; 32
 2de:	b1 e4       	ldi	r27, 0x41	; 65
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	9a 83       	std	Y+2, r25	; 0x02
 2e4:	ab 83       	std	Y+3, r26	; 0x03
 2e6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	4a e7       	ldi	r20, 0x7A	; 122
 2ee:	53 e4       	ldi	r21, 0x43	; 67
 2f0:	69 81       	ldd	r22, Y+1	; 0x01
 2f2:	7a 81       	ldd	r23, Y+2	; 0x02
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	9c 81       	ldd	r25, Y+4	; 0x04
 2f8:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	8d 83       	std	Y+5, r24	; 0x05
 302:	9e 83       	std	Y+6, r25	; 0x06
 304:	af 83       	std	Y+7, r26	; 0x07
 306:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e8       	ldi	r20, 0x80	; 128
 30e:	5f e3       	ldi	r21, 0x3F	; 63
 310:	6d 81       	ldd	r22, Y+5	; 0x05
 312:	7e 81       	ldd	r23, Y+6	; 0x06
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	98 85       	ldd	r25, Y+8	; 0x08
 318:	0e 94 88 03 	call	0x710	; 0x710 <__cmpsf2>
 31c:	88 23       	and	r24, r24
 31e:	2c f4       	brge	.+10     	; 0x32a <main+0xb2>
		__ticks = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9a 87       	std	Y+10, r25	; 0x0a
 326:	89 87       	std	Y+9, r24	; 0x09
 328:	3f c0       	rjmp	.+126    	; 0x3a8 <main+0x130>
	else if (__tmp > 65535)
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	3f ef       	ldi	r19, 0xFF	; 255
 32e:	4f e7       	ldi	r20, 0x7F	; 127
 330:	57 e4       	ldi	r21, 0x47	; 71
 332:	6d 81       	ldd	r22, Y+5	; 0x05
 334:	7e 81       	ldd	r23, Y+6	; 0x06
 336:	8f 81       	ldd	r24, Y+7	; 0x07
 338:	98 85       	ldd	r25, Y+8	; 0x08
 33a:	0e 94 09 04 	call	0x812	; 0x812 <__gesf2>
 33e:	18 16       	cp	r1, r24
 340:	4c f5       	brge	.+82     	; 0x394 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e2       	ldi	r20, 0x20	; 32
 348:	51 e4       	ldi	r21, 0x41	; 65
 34a:	69 81       	ldd	r22, Y+1	; 0x01
 34c:	7a 81       	ldd	r23, Y+2	; 0x02
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	9c 81       	ldd	r25, Y+4	; 0x04
 352:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	bc 01       	movw	r22, r24
 35c:	cd 01       	movw	r24, r26
 35e:	0e 94 8d 03 	call	0x71a	; 0x71a <__fixunssfsi>
 362:	dc 01       	movw	r26, r24
 364:	cb 01       	movw	r24, r22
 366:	9a 87       	std	Y+10, r25	; 0x0a
 368:	89 87       	std	Y+9, r24	; 0x09
 36a:	0f c0       	rjmp	.+30     	; 0x38a <main+0x112>
 36c:	89 e1       	ldi	r24, 0x19	; 25
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	9c 87       	std	Y+12, r25	; 0x0c
 372:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 374:	8b 85       	ldd	r24, Y+11	; 0x0b
 376:	9c 85       	ldd	r25, Y+12	; 0x0c
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x100>
 37c:	9c 87       	std	Y+12, r25	; 0x0c
 37e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 380:	89 85       	ldd	r24, Y+9	; 0x09
 382:	9a 85       	ldd	r25, Y+10	; 0x0a
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	9a 87       	std	Y+10, r25	; 0x0a
 388:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38a:	89 85       	ldd	r24, Y+9	; 0x09
 38c:	9a 85       	ldd	r25, Y+10	; 0x0a
 38e:	89 2b       	or	r24, r25
 390:	69 f7       	brne	.-38     	; 0x36c <main+0xf4>
 392:	14 c0       	rjmp	.+40     	; 0x3bc <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 394:	6d 81       	ldd	r22, Y+5	; 0x05
 396:	7e 81       	ldd	r23, Y+6	; 0x06
 398:	8f 81       	ldd	r24, Y+7	; 0x07
 39a:	98 85       	ldd	r25, Y+8	; 0x08
 39c:	0e 94 8d 03 	call	0x71a	; 0x71a <__fixunssfsi>
 3a0:	dc 01       	movw	r26, r24
 3a2:	cb 01       	movw	r24, r22
 3a4:	9a 87       	std	Y+10, r25	; 0x0a
 3a6:	89 87       	std	Y+9, r24	; 0x09
 3a8:	89 85       	ldd	r24, Y+9	; 0x09
 3aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ac:	9e 87       	std	Y+14, r25	; 0x0e
 3ae:	8d 87       	std	Y+13, r24	; 0x0d
 3b0:	8d 85       	ldd	r24, Y+13	; 0x0d
 3b2:	9e 85       	ldd	r25, Y+14	; 0x0e
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x13c>
 3b8:	9e 87       	std	Y+14, r25	; 0x0e
 3ba:	8d 87       	std	Y+13, r24	; 0x0d

    while (1) {
    	 _delay_ms(10);
        LEDM_Manage();
 3bc:	0e 94 27 03 	call	0x64e	; 0x64e <LEDM_Manage>
        counter_main++;
 3c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3c8:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 3cc:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	a1 1d       	adc	r26, r1
 3d4:	b1 1d       	adc	r27, r1
 3d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 3da:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 3de:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 3e2:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
        if(counter_main>=2){
 3e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 3ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 3ee:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 3f2:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 3f6:	02 97       	sbiw	r24, 0x02	; 2
 3f8:	a1 05       	cpc	r26, r1
 3fa:	b1 05       	cpc	r27, r1
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	6c cf       	rjmp	.-296    	; 0x2d8 <main+0x60>
            WDGM_MainFunction();
 400:	0e 94 1d 02 	call	0x43a	; 0x43a <WDGM_MainFunction>
            counter_main = 0;
 404:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 408:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 40c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x2>
 410:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x3>
//    Timer2_Init();

    ENABLE_INTERRUPTS(); // Enable global interrupts

    while (1) {
    	 _delay_ms(10);
 414:	61 cf       	rjmp	.-318    	; 0x2d8 <main+0x60>

00000416 <WDGM_Init>:
static uint8 wdgmStatus = 1;
static uint16 ledManageCalls = 0;
static uint8 wdgmMainFunctionCalled = 0;
static counter_wdg =0 ;

void WDGM_Init(void) {
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
    wdgmStatus = 1; // initially OK
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    ledManageCalls = 0;
 424:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ledManageCalls+0x1>
 428:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ledManageCalls>
    wdgmMainFunctionCalled = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <wdgmMainFunctionCalled>
}
 432:	00 00       	nop
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <WDGM_MainFunction>:

void WDGM_MainFunction(void) {
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
	toggle_testPins(&DDRD, &PORTD,PIN2_ID);
 442:	42 e0       	ldi	r20, 0x02	; 2
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	6b e2       	ldi	r22, 0x2B	; 43
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	8a e2       	ldi	r24, 0x2A	; 42
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_testPins>
    counter_wdg += 20; // This function is called every 10ms
 452:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <counter_wdg>
 456:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <counter_wdg+0x1>
 45a:	44 96       	adiw	r24, 0x14	; 20
 45c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <counter_wdg+0x1>
 460:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <counter_wdg>

    
    if (counter_wdg >= 100) {
 464:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <counter_wdg>
 468:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <counter_wdg+0x1>
 46c:	84 36       	cpi	r24, 0x64	; 100
 46e:	91 05       	cpc	r25, r1
 470:	94 f0       	brlt	.+36     	; 0x496 <WDGM_MainFunction+0x5c>
        if (ledManageCalls >= 8 && ledManageCalls <= 12) {
 472:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledManageCalls>
 476:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ledManageCalls+0x1>
 47a:	08 97       	sbiw	r24, 0x08	; 8
 47c:	50 f0       	brcs	.+20     	; 0x492 <WDGM_MainFunction+0x58>
 47e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledManageCalls>
 482:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ledManageCalls+0x1>
 486:	0d 97       	sbiw	r24, 0x0d	; 13
 488:	20 f4       	brcc	.+8      	; 0x492 <WDGM_MainFunction+0x58>
        wdgmStatus = 1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 490:	02 c0       	rjmp	.+4      	; 0x496 <WDGM_MainFunction+0x5c>
    } else {
        wdgmStatus = 0;
 492:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
}
      ledManageCalls = 0; // Reset count every 100ms
 496:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ledManageCalls+0x1>
 49a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ledManageCalls>
    wdgmMainFunctionCalled = 1; // Tells that Function is called
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <wdgmMainFunctionCalled>

}
 4a4:	00 00       	nop
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <WDGM_ProvideSupervisionStatus>:

WDGM_StatusType WDGM_ProvideSupervisionStatus(void) {
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
    return wdgmStatus;
 4b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void) {
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
    ledManageCalls++;
 4c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledManageCalls>
 4ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ledManageCalls+0x1>
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ledManageCalls+0x1>
 4d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ledManageCalls>
}
 4d8:	00 00       	nop
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <WDGM_MainFunctionStuck>:


int WDGM_MainFunctionStuck(void) {
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
    // Check if WDGM_MainFunction was called
    if (wdgmMainFunctionCalled) {
 4e8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <wdgmMainFunctionCalled>
 4ec:	88 23       	and	r24, r24
 4ee:	29 f0       	breq	.+10     	; 0x4fa <WDGM_MainFunctionStuck+0x1a>
        wdgmMainFunctionCalled = 0; // Reset the flag
 4f0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <wdgmMainFunctionCalled>
        return 0; // Not stuck
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <WDGM_MainFunctionStuck+0x1e>
    }
    return 1; // Stuck
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <WDGDrv_Init>:
#include <avr/wdt.h>




void WDGDrv_Init(void){
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
    
    DISABLE_INTERRUPTS(); // Disable global interrupts
 50c:	8f e5       	ldi	r24, 0x5F	; 95
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	80 81       	ld	r24, Z
 514:	91 81       	ldd	r25, Z+1	; 0x01
 516:	a2 81       	ldd	r26, Z+2	; 0x02
 518:	b3 81       	ldd	r27, Z+3	; 0x03
 51a:	2f e5       	ldi	r18, 0x5F	; 95
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	8f 77       	andi	r24, 0x7F	; 127
 520:	f9 01       	movw	r30, r18
 522:	80 83       	st	Z, r24
 524:	91 83       	std	Z+1, r25	; 0x01
 526:	a2 83       	std	Z+2, r26	; 0x02
 528:	b3 83       	std	Z+3, r27	; 0x03
    
//    wdt_enable();
	__asm__ __volatile__ (
 52a:	88 e1       	ldi	r24, 0x18	; 24
 52c:	9a e0       	ldi	r25, 0x0A	; 10
 52e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 532:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	);
//   // Configure the watchdog timer for a 64ms timeout
//    WDTCSR |= (1 << WDCE) | (1 << WDE);  // Set Watchdog Change Enable
//    WDTCSR = (1 << WDE) | (1 << WDP1) | (1 << WDP0);  // Set timeout to 64ms

    ENABLE_INTERRUPTS(); // Enable global interrupts
 536:	8f e5       	ldi	r24, 0x5F	; 95
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	fc 01       	movw	r30, r24
 53c:	80 81       	ld	r24, Z
 53e:	91 81       	ldd	r25, Z+1	; 0x01
 540:	a2 81       	ldd	r26, Z+2	; 0x02
 542:	b3 81       	ldd	r27, Z+3	; 0x03
 544:	2f e5       	ldi	r18, 0x5F	; 95
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	80 68       	ori	r24, 0x80	; 128
 54a:	f9 01       	movw	r30, r18
 54c:	80 83       	st	Z, r24
 54e:	91 83       	std	Z+1, r25	; 0x01
 550:	a2 83       	std	Z+2, r26	; 0x02
 552:	b3 83       	std	Z+3, r27	; 0x03
    



}
 554:	00 00       	nop
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <WDGDrv_Refresh>:
void WDGDrv_Refresh(void) {
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
    // Reset the watchdog timer
        wdt_reset();
 564:	a8 95       	wdr
}
 566:	00 00       	nop
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <GPIO_Init>:

#include "Bit_Operations.h"
#include "Std_Types.h"


void GPIO_Init(void){
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62

     //PB2 as output
	DDRB |= (1 << PIN2_ID);
 576:	84 e2       	ldi	r24, 0x24	; 36
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	fc 01       	movw	r30, r24
 57c:	20 81       	ld	r18, Z
 57e:	84 e2       	ldi	r24, 0x24	; 36
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	24 60       	ori	r18, 0x04	; 4
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
    // Initlally LED ON
	PORTB |= (1 << PIN2_ID);
 588:	85 e2       	ldi	r24, 0x25	; 37
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	20 81       	ld	r18, Z
 590:	85 e2       	ldi	r24, 0x25	; 37
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	24 60       	ori	r18, 0x04	; 4
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
   
}
 59a:	00 00       	nop
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <GPIO_Write>:


void GPIO_Write(int PinId, int PinData) {
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <GPIO_Write+0x6>
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <GPIO_Write+0x8>
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	9a 83       	std	Y+2, r25	; 0x02
 5b0:	89 83       	std	Y+1, r24	; 0x01
 5b2:	7c 83       	std	Y+4, r23	; 0x04
 5b4:	6b 83       	std	Y+3, r22	; 0x03


    if(PinData == HIGH)
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	9c 81       	ldd	r25, Y+4	; 0x04
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	99 f4       	brne	.+38     	; 0x5e4 <GPIO_Write+0x42>
			{
				SET_BIT(PORTB,PinId);  // Set pin high
 5be:	85 e2       	ldi	r24, 0x25	; 37
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	fc 01       	movw	r30, r24
 5c4:	80 81       	ld	r24, Z
 5c6:	28 2f       	mov	r18, r24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	09 80       	ldd	r0, Y+1	; 0x01
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <GPIO_Write+0x32>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <GPIO_Write+0x2e>
 5d8:	28 2b       	or	r18, r24
 5da:	85 e2       	ldi	r24, 0x25	; 37
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTB,PinId); // Set pin low
			}
}
 5e2:	13 c0       	rjmp	.+38     	; 0x60a <GPIO_Write+0x68>
			{
				SET_BIT(PORTB,PinId);  // Set pin high
			}
			else
			{
				CLEAR_BIT(PORTB,PinId); // Set pin low
 5e4:	85 e2       	ldi	r24, 0x25	; 37
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	fc 01       	movw	r30, r24
 5ea:	80 81       	ld	r24, Z
 5ec:	28 2f       	mov	r18, r24
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	09 80       	ldd	r0, Y+1	; 0x01
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <GPIO_Write+0x58>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <GPIO_Write+0x54>
 5fe:	80 95       	com	r24
 600:	28 23       	and	r18, r24
 602:	85 e2       	ldi	r24, 0x25	; 37
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
			}
}
 60a:	00 00       	nop
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <LEDM_Init>:


static uint32 ledState = 0;
static uint32 counter = 0;

void LEDM_Init(void) {
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
	GPIO_Init();
 622:	0e 94 b7 02 	call	0x56e	; 0x56e <GPIO_Init>
    ledState = 0;
 626:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ledState>
 62a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ledState+0x1>
 62e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ledState+0x2>
 632:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ledState+0x3>
    counter = 0;
 636:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 63a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <counter+0x1>
 63e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <counter+0x2>
 642:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter+0x3>
}
 646:	00 00       	nop
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <LEDM_Manage>:

void LEDM_Manage(void) {
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
	toggle_testPins(&DDRD, &PORTD,PIN0_ID); // Toggle test pin for debugging
 656:	40 e0       	ldi	r20, 0x00	; 0
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	6b e2       	ldi	r22, 0x2B	; 43
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	8a e2       	ldi	r24, 0x2A	; 42
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_testPins>
    counter += 10; // This function is called every 10ms
 666:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
 66a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <counter+0x1>
 66e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <counter+0x2>
 672:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <counter+0x3>
 676:	0a 96       	adiw	r24, 0x0a	; 10
 678:	a1 1d       	adc	r26, r1
 67a:	b1 1d       	adc	r27, r1
 67c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <counter>
 680:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <counter+0x1>
 684:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <counter+0x2>
 688:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <counter+0x3>

    if (counter >= 500) {
 68c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
 690:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <counter+0x1>
 694:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <counter+0x2>
 698:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <counter+0x3>
 69c:	84 3f       	cpi	r24, 0xF4	; 244
 69e:	91 40       	sbci	r25, 0x01	; 1
 6a0:	a1 05       	cpc	r26, r1
 6a2:	b1 05       	cpc	r27, r1
 6a4:	78 f1       	brcs	.+94     	; 0x704 <LEDM_Manage+0xb6>
        ledState = !ledState; // Toggle LED state
 6a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ledState>
 6aa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ledState+0x1>
 6ae:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <ledState+0x2>
 6b2:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <ledState+0x3>
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	89 2b       	or	r24, r25
 6ba:	8a 2b       	or	r24, r26
 6bc:	8b 2b       	or	r24, r27
 6be:	09 f0       	breq	.+2      	; 0x6c2 <LEDM_Manage+0x74>
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	82 2f       	mov	r24, r18
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	a0 e0       	ldi	r26, 0x00	; 0
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ledState>
 6ce:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ledState+0x1>
 6d2:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <ledState+0x2>
 6d6:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <ledState+0x3>
        GPIO_Write(2,ledState);
 6da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ledState>
 6de:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ledState+0x1>
 6e2:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <ledState+0x2>
 6e6:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <ledState+0x3>
 6ea:	bc 01       	movw	r22, r24
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GPIO_Write>
        counter = 0;
 6f4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 6f8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <counter+0x1>
 6fc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <counter+0x2>
 700:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter+0x3>
    }
    WDGM_AlivenessIndication(); // Indicate aliveness to the watchdog manager
 704:	0e 94 5f 02 	call	0x4be	; 0x4be <WDGM_AlivenessIndication>
}
 708:	00 00       	nop
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	08 95       	ret

00000710 <__cmpsf2>:
 710:	0e 94 bc 03 	call	0x778	; 0x778 <__fp_cmp>
 714:	08 f4       	brcc	.+2      	; 0x718 <__cmpsf2+0x8>
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	08 95       	ret

0000071a <__fixunssfsi>:
 71a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fp_splitA>
 71e:	88 f0       	brcs	.+34     	; 0x742 <__fixunssfsi+0x28>
 720:	9f 57       	subi	r25, 0x7F	; 127
 722:	98 f0       	brcs	.+38     	; 0x74a <__fixunssfsi+0x30>
 724:	b9 2f       	mov	r27, r25
 726:	99 27       	eor	r25, r25
 728:	b7 51       	subi	r27, 0x17	; 23
 72a:	b0 f0       	brcs	.+44     	; 0x758 <__fixunssfsi+0x3e>
 72c:	e1 f0       	breq	.+56     	; 0x766 <__fixunssfsi+0x4c>
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	1a f0       	brmi	.+6      	; 0x73e <__fixunssfsi+0x24>
 738:	ba 95       	dec	r27
 73a:	c9 f7       	brne	.-14     	; 0x72e <__fixunssfsi+0x14>
 73c:	14 c0       	rjmp	.+40     	; 0x766 <__fixunssfsi+0x4c>
 73e:	b1 30       	cpi	r27, 0x01	; 1
 740:	91 f0       	breq	.+36     	; 0x766 <__fixunssfsi+0x4c>
 742:	0e 94 02 04 	call	0x804	; 0x804 <__fp_zero>
 746:	b1 e0       	ldi	r27, 0x01	; 1
 748:	08 95       	ret
 74a:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_zero>
 74e:	67 2f       	mov	r22, r23
 750:	78 2f       	mov	r23, r24
 752:	88 27       	eor	r24, r24
 754:	b8 5f       	subi	r27, 0xF8	; 248
 756:	39 f0       	breq	.+14     	; 0x766 <__fixunssfsi+0x4c>
 758:	b9 3f       	cpi	r27, 0xF9	; 249
 75a:	cc f3       	brlt	.-14     	; 0x74e <__fixunssfsi+0x34>
 75c:	86 95       	lsr	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b3 95       	inc	r27
 764:	d9 f7       	brne	.-10     	; 0x75c <__fixunssfsi+0x42>
 766:	3e f4       	brtc	.+14     	; 0x776 <__fixunssfsi+0x5c>
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <__fp_cmp>:
 778:	99 0f       	add	r25, r25
 77a:	00 08       	sbc	r0, r0
 77c:	55 0f       	add	r21, r21
 77e:	aa 0b       	sbc	r26, r26
 780:	e0 e8       	ldi	r30, 0x80	; 128
 782:	fe ef       	ldi	r31, 0xFE	; 254
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	e8 07       	cpc	r30, r24
 78a:	f9 07       	cpc	r31, r25
 78c:	c0 f0       	brcs	.+48     	; 0x7be <__fp_cmp+0x46>
 78e:	12 16       	cp	r1, r18
 790:	13 06       	cpc	r1, r19
 792:	e4 07       	cpc	r30, r20
 794:	f5 07       	cpc	r31, r21
 796:	98 f0       	brcs	.+38     	; 0x7be <__fp_cmp+0x46>
 798:	62 1b       	sub	r22, r18
 79a:	73 0b       	sbc	r23, r19
 79c:	84 0b       	sbc	r24, r20
 79e:	95 0b       	sbc	r25, r21
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <__fp_cmp+0x38>
 7a2:	0a 26       	eor	r0, r26
 7a4:	61 f0       	breq	.+24     	; 0x7be <__fp_cmp+0x46>
 7a6:	23 2b       	or	r18, r19
 7a8:	24 2b       	or	r18, r20
 7aa:	25 2b       	or	r18, r21
 7ac:	21 f4       	brne	.+8      	; 0x7b6 <__fp_cmp+0x3e>
 7ae:	08 95       	ret
 7b0:	0a 26       	eor	r0, r26
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <__fp_cmp+0x3e>
 7b4:	a1 40       	sbci	r26, 0x01	; 1
 7b6:	a6 95       	lsr	r26
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	81 1d       	adc	r24, r1
 7bc:	81 1d       	adc	r24, r1
 7be:	08 95       	ret

000007c0 <__fp_split3>:
 7c0:	57 fd       	sbrc	r21, 7
 7c2:	90 58       	subi	r25, 0x80	; 128
 7c4:	44 0f       	add	r20, r20
 7c6:	55 1f       	adc	r21, r21
 7c8:	59 f0       	breq	.+22     	; 0x7e0 <__fp_splitA+0x10>
 7ca:	5f 3f       	cpi	r21, 0xFF	; 255
 7cc:	71 f0       	breq	.+28     	; 0x7ea <__fp_splitA+0x1a>
 7ce:	47 95       	ror	r20

000007d0 <__fp_splitA>:
 7d0:	88 0f       	add	r24, r24
 7d2:	97 fb       	bst	r25, 7
 7d4:	99 1f       	adc	r25, r25
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <__fp_splitA+0x20>
 7d8:	9f 3f       	cpi	r25, 0xFF	; 255
 7da:	79 f0       	breq	.+30     	; 0x7fa <__fp_splitA+0x2a>
 7dc:	87 95       	ror	r24
 7de:	08 95       	ret
 7e0:	12 16       	cp	r1, r18
 7e2:	13 06       	cpc	r1, r19
 7e4:	14 06       	cpc	r1, r20
 7e6:	55 1f       	adc	r21, r21
 7e8:	f2 cf       	rjmp	.-28     	; 0x7ce <__fp_split3+0xe>
 7ea:	46 95       	lsr	r20
 7ec:	f1 df       	rcall	.-30     	; 0x7d0 <__fp_splitA>
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <__DATA_REGION_LENGTH__>
 7f0:	16 16       	cp	r1, r22
 7f2:	17 06       	cpc	r1, r23
 7f4:	18 06       	cpc	r1, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	f1 cf       	rjmp	.-30     	; 0x7dc <__fp_splitA+0xc>
 7fa:	86 95       	lsr	r24
 7fc:	71 05       	cpc	r23, r1
 7fe:	61 05       	cpc	r22, r1
 800:	08 94       	sec
 802:	08 95       	ret

00000804 <__fp_zero>:
 804:	e8 94       	clt

00000806 <__fp_szero>:
 806:	bb 27       	eor	r27, r27
 808:	66 27       	eor	r22, r22
 80a:	77 27       	eor	r23, r23
 80c:	cb 01       	movw	r24, r22
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__gesf2>:
 812:	0e 94 bc 03 	call	0x778	; 0x778 <__fp_cmp>
 816:	08 f4       	brcc	.+2      	; 0x81a <__gesf2+0x8>
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	08 95       	ret

0000081c <__mulsf3>:
 81c:	0e 94 21 04 	call	0x842	; 0x842 <__mulsf3x>
 820:	0c 94 92 04 	jmp	0x924	; 0x924 <__fp_round>
 824:	0e 94 84 04 	call	0x908	; 0x908 <__fp_pscA>
 828:	38 f0       	brcs	.+14     	; 0x838 <__mulsf3+0x1c>
 82a:	0e 94 8b 04 	call	0x916	; 0x916 <__fp_pscB>
 82e:	20 f0       	brcs	.+8      	; 0x838 <__mulsf3+0x1c>
 830:	95 23       	and	r25, r21
 832:	11 f0       	breq	.+4      	; 0x838 <__mulsf3+0x1c>
 834:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_inf>
 838:	0c 94 81 04 	jmp	0x902	; 0x902 <__fp_nan>
 83c:	11 24       	eor	r1, r1
 83e:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_szero>

00000842 <__mulsf3x>:
 842:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__fp_split3>
 846:	70 f3       	brcs	.-36     	; 0x824 <__mulsf3+0x8>

00000848 <__mulsf3_pse>:
 848:	95 9f       	mul	r25, r21
 84a:	c1 f3       	breq	.-16     	; 0x83c <__mulsf3+0x20>
 84c:	95 0f       	add	r25, r21
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	55 1f       	adc	r21, r21
 852:	62 9f       	mul	r22, r18
 854:	f0 01       	movw	r30, r0
 856:	72 9f       	mul	r23, r18
 858:	bb 27       	eor	r27, r27
 85a:	f0 0d       	add	r31, r0
 85c:	b1 1d       	adc	r27, r1
 85e:	63 9f       	mul	r22, r19
 860:	aa 27       	eor	r26, r26
 862:	f0 0d       	add	r31, r0
 864:	b1 1d       	adc	r27, r1
 866:	aa 1f       	adc	r26, r26
 868:	64 9f       	mul	r22, r20
 86a:	66 27       	eor	r22, r22
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	66 1f       	adc	r22, r22
 872:	82 9f       	mul	r24, r18
 874:	22 27       	eor	r18, r18
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	62 1f       	adc	r22, r18
 87c:	73 9f       	mul	r23, r19
 87e:	b0 0d       	add	r27, r0
 880:	a1 1d       	adc	r26, r1
 882:	62 1f       	adc	r22, r18
 884:	83 9f       	mul	r24, r19
 886:	a0 0d       	add	r26, r0
 888:	61 1d       	adc	r22, r1
 88a:	22 1f       	adc	r18, r18
 88c:	74 9f       	mul	r23, r20
 88e:	33 27       	eor	r19, r19
 890:	a0 0d       	add	r26, r0
 892:	61 1d       	adc	r22, r1
 894:	23 1f       	adc	r18, r19
 896:	84 9f       	mul	r24, r20
 898:	60 0d       	add	r22, r0
 89a:	21 1d       	adc	r18, r1
 89c:	82 2f       	mov	r24, r18
 89e:	76 2f       	mov	r23, r22
 8a0:	6a 2f       	mov	r22, r26
 8a2:	11 24       	eor	r1, r1
 8a4:	9f 57       	subi	r25, 0x7F	; 127
 8a6:	50 40       	sbci	r21, 0x00	; 0
 8a8:	9a f0       	brmi	.+38     	; 0x8d0 <__mulsf3_pse+0x88>
 8aa:	f1 f0       	breq	.+60     	; 0x8e8 <__mulsf3_pse+0xa0>
 8ac:	88 23       	and	r24, r24
 8ae:	4a f0       	brmi	.+18     	; 0x8c2 <__mulsf3_pse+0x7a>
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	bb 1f       	adc	r27, r27
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	91 50       	subi	r25, 0x01	; 1
 8be:	50 40       	sbci	r21, 0x00	; 0
 8c0:	a9 f7       	brne	.-22     	; 0x8ac <__mulsf3_pse+0x64>
 8c2:	9e 3f       	cpi	r25, 0xFE	; 254
 8c4:	51 05       	cpc	r21, r1
 8c6:	80 f0       	brcs	.+32     	; 0x8e8 <__mulsf3_pse+0xa0>
 8c8:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__fp_inf>
 8cc:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_szero>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	e4 f3       	brlt	.-8      	; 0x8cc <__mulsf3_pse+0x84>
 8d4:	98 3e       	cpi	r25, 0xE8	; 232
 8d6:	d4 f3       	brlt	.-12     	; 0x8cc <__mulsf3_pse+0x84>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	f7 95       	ror	r31
 8e2:	e7 95       	ror	r30
 8e4:	9f 5f       	subi	r25, 0xFF	; 255
 8e6:	c1 f7       	brne	.-16     	; 0x8d8 <__mulsf3_pse+0x90>
 8e8:	fe 2b       	or	r31, r30
 8ea:	88 0f       	add	r24, r24
 8ec:	91 1d       	adc	r25, r1
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret

000008f6 <__fp_inf>:
 8f6:	97 f9       	bld	r25, 7
 8f8:	9f 67       	ori	r25, 0x7F	; 127
 8fa:	80 e8       	ldi	r24, 0x80	; 128
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	08 95       	ret

00000902 <__fp_nan>:
 902:	9f ef       	ldi	r25, 0xFF	; 255
 904:	80 ec       	ldi	r24, 0xC0	; 192
 906:	08 95       	ret

00000908 <__fp_pscA>:
 908:	00 24       	eor	r0, r0
 90a:	0a 94       	dec	r0
 90c:	16 16       	cp	r1, r22
 90e:	17 06       	cpc	r1, r23
 910:	18 06       	cpc	r1, r24
 912:	09 06       	cpc	r0, r25
 914:	08 95       	ret

00000916 <__fp_pscB>:
 916:	00 24       	eor	r0, r0
 918:	0a 94       	dec	r0
 91a:	12 16       	cp	r1, r18
 91c:	13 06       	cpc	r1, r19
 91e:	14 06       	cpc	r1, r20
 920:	05 06       	cpc	r0, r21
 922:	08 95       	ret

00000924 <__fp_round>:
 924:	09 2e       	mov	r0, r25
 926:	03 94       	inc	r0
 928:	00 0c       	add	r0, r0
 92a:	11 f4       	brne	.+4      	; 0x930 <__fp_round+0xc>
 92c:	88 23       	and	r24, r24
 92e:	52 f0       	brmi	.+20     	; 0x944 <__fp_round+0x20>
 930:	bb 0f       	add	r27, r27
 932:	40 f4       	brcc	.+16     	; 0x944 <__fp_round+0x20>
 934:	bf 2b       	or	r27, r31
 936:	11 f4       	brne	.+4      	; 0x93c <__fp_round+0x18>
 938:	60 ff       	sbrs	r22, 0
 93a:	04 c0       	rjmp	.+8      	; 0x944 <__fp_round+0x20>
 93c:	6f 5f       	subi	r22, 0xFF	; 255
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	08 95       	ret

00000946 <_exit>:
 946:	f8 94       	cli

00000948 <__stop_program>:
 948:	ff cf       	rjmp	.-2      	; 0x948 <__stop_program>
